/*
------------------------------------------
@Author: Xhy333
@Date: 2024-08-3Êõ¥Êñ∞
ËúúÈõ™ÂÜ∞ÂüéÊä¢Âà∏
‰ªÖQXÊµãËØï



‚ö†Ô∏è„ÄêÂÖçË¥£Â£∞Êòé„Äë
------------------------------------------
1„ÄÅÊ≠§ËÑöÊú¨‰ªÖÁî®‰∫éÂ≠¶‰π†Á†îÁ©∂Ôºå‰∏ç‰øùËØÅÂÖ∂ÂêàÊ≥ïÊÄß„ÄÅÂáÜÁ°ÆÊÄß„ÄÅÊúâÊïàÊÄßÔºåËØ∑Ê†πÊçÆÊÉÖÂÜµËá™Ë°åÂà§Êñ≠ÔºåÊú¨‰∫∫ÂØπÊ≠§‰∏çÊâøÊãÖ‰ªª‰Ωï‰øùËØÅË¥£‰ªª„ÄÇ
2„ÄÅÁî±‰∫éÊ≠§ËÑöÊú¨‰ªÖÁî®‰∫éÂ≠¶‰π†Á†îÁ©∂ÔºåÊÇ®ÂøÖÈ°ªÂú®‰∏ãËΩΩÂêé 24 Â∞èÊó∂ÂÜÖÂ∞ÜÊâÄÊúâÂÜÖÂÆπ‰ªéÊÇ®ÁöÑËÆ°ÁÆóÊú∫ÊàñÊâãÊú∫Êàñ‰ªª‰ΩïÂ≠òÂÇ®ËÆæÂ§á‰∏≠ÂÆåÂÖ®Âà†Èô§ÔºåËã•ËøùÂèçËßÑÂÆöÂºïËµ∑‰ªª‰Ωï‰∫ã‰ª∂Êú¨‰∫∫ÂØπÊ≠§Âùá‰∏çË¥üË¥£„ÄÇ
3„ÄÅËØ∑ÂãøÂ∞ÜÊ≠§ËÑöÊú¨Áî®‰∫é‰ªª‰ΩïÂïÜ‰∏öÊàñÈùûÊ≥ïÁõÆÁöÑÔºåËã•ËøùÂèçËßÑÂÆöËØ∑Ëá™Ë°åÂØπÊ≠§Ë¥üË¥£„ÄÇ
4„ÄÅÊ≠§ËÑöÊú¨Ê∂âÂèäÂ∫îÁî®‰∏éÊú¨‰∫∫Êó†ÂÖ≥ÔºåÊú¨‰∫∫ÂØπÂõ†Ê≠§ÂºïËµ∑ÁöÑ‰ªª‰ΩïÈöêÁßÅÊ≥ÑÊºèÊàñÂÖ∂‰ªñÂêéÊûú‰∏çÊâøÊãÖ‰ªª‰ΩïË¥£‰ªª„ÄÇ
5„ÄÅÊú¨‰∫∫ÂØπ‰ªª‰ΩïËÑöÊú¨ÂºïÂèëÁöÑÈóÆÈ¢òÊ¶Ç‰∏çË¥üË¥£ÔºåÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫éÁî±ËÑöÊú¨ÈîôËØØÂºïËµ∑ÁöÑ‰ªª‰ΩïÊçüÂ§±ÂíåÊçüÂÆ≥„ÄÇ
6„ÄÅÂ¶ÇÊûú‰ªª‰ΩïÂçï‰ΩçÊàñ‰∏™‰∫∫ËÆ§‰∏∫Ê≠§ËÑöÊú¨ÂèØËÉΩÊ∂âÂ´å‰æµÁäØÂÖ∂ÊùÉÂà©ÔºåÂ∫îÂèäÊó∂ÈÄöÁü•Âπ∂Êèê‰æõË∫´‰ªΩËØÅÊòéÔºåÊâÄÊúâÊùÉËØÅÊòéÔºåÊàë‰ª¨Â∞ÜÂú®Êî∂Âà∞ËÆ§ËØÅÊñá‰ª∂Á°ÆËÆ§ÂêéÂà†Èô§Ê≠§ËÑöÊú¨„ÄÇ
7„ÄÅÊâÄÊúâÁõ¥Êé•ÊàñÈó¥Êé•‰ΩøÁî®„ÄÅÊü•ÁúãÊ≠§ËÑöÊú¨ÁöÑ‰∫∫ÂùáÂ∫îËØ•‰ªîÁªÜÈòÖËØªÊ≠§Â£∞Êòé„ÄÇÊú¨‰∫∫‰øùÁïôÈöèÊó∂Êõ¥ÊîπÊàñË°•ÂÖÖÊ≠§Â£∞ÊòéÁöÑÊùÉÂà©„ÄÇ‰∏ÄÊó¶ÊÇ®‰ΩøÁî®ÊàñÂ§çÂà∂‰∫ÜÊ≠§ËÑöÊú¨ÔºåÂç≥ËßÜ‰∏∫ÊÇ®Â∑≤Êé•ÂèóÊ≠§ÂÖçË¥£Â£∞Êòé„ÄÇ
*/
const $ = new Env("ËúúÈõ™ÂÜ∞Âüé");
const ckName = "mxbc_data";
const userCookie = $.toObj($.isNode() ? process.env[ckName] : $.getdata(ckName)) || [];
//notify
const notify = $.isNode() ? require('./sendNotify') : '';
$.notifyMsg = []
//debug
$.is_debug = ($.isNode() ? process.env.IS_DEDUG : $.getdata('is_debug')) || 'false';
$.doFlag = { "true": "‚úÖ", "false": "‚õîÔ∏è" };

//------------------------------------------
const baseUrl = "https://mxsa.mxbc.net"
const _headers = {
    "app": "mxbc",
    "appchannel": "xiaomi",
    "appversion": "3.0.3",
    "Access-Token": "",
    "Host": "mxsa.mxbc.net",
    "User-Agent": "okhttp/4.4.1"
};
const fetch = async (o) => {
    try {
        if (typeof o === 'string') o = { url: o };
        if (o?.url?.startsWith("/") || o?.url?.startsWith(":")) o.url = baseUrl + o.url
        const res = await Request({ ...o, headers: o.headers || _headers, url: o.url })
        debug(res, o?.url?.replace(/\/+$/, '').substring(o?.url?.lastIndexOf('/') + 1));
        //if (!(res?.code == 0 || res?.code == 5020||res?.)) throw new Error(res?.msg || `Áî®Êà∑ÈúÄË¶ÅÂéªÁôªÂΩï`);
        return res;
    } catch (e) {
        $.ckStatus = false;
        $.log(`‚õîÔ∏è ËØ∑Ê±ÇÂèëËµ∑Â§±Ë¥•ÔºÅ${e}`);
    }
}
//Êü•ËØ¢Áî®Êà∑‰ø°ÊÅØ
async function getUserInfo() {
    try {
        let timestamp = ts13();
        const options = {
            url: `/api/v1/customer/info`,
            params: {
                "appId": "d82be6bbc1da11eb9dd000163e122ecb",
                "t": timestamp,
                "sign": getSHA256withRSA('appId=d82be6bbc1da11eb9dd000163e122ecb&t=' + timestamp)
            }
        };
        //postÊñπÊ≥ï
        let res = await fetch(options);
        if (!(res?.code == 0 || res?.code == 5020)) throw new Error(`Â§±Ë¥•!${res?.msg}`)
        return {
            userName: res?.data?.mobilePhone,
            level: res?.data?.customerLevel,
            levelName: res?.data?.customerLevelVo?.levelName,
            point: res?.data?.customerPoint
        }

    } catch (e) {
        $.ckStatus = false;
        $.log(`‚ùåÁ≠æÂà∞ÊâßË°åÂ§±Ë¥•ÔºÅÂéüÂõ†‰∏∫${e}`);
    }
}
//Ëé∑ÂèñÈ°µÈù¢Ë∑≥ËΩ¨url
async function getLoginUrl() {
    try {
        let timestamp = ts13();
        const options = {
            url: `/api/v1/duiba/getLoginUrl`,
            params: {
                "appId": "d82be6bbc1da11eb9dd000163e122ecb",
                "t": timestamp,
                "sign": getSHA256withRSA('appId=d82be6bbc1da11eb9dd000163e122ecb&t=' + timestamp)
            }
        };
        //postÊñπÊ≥ï
        let res = await fetch(options);
        return res?.data?.loginUrl;
    } catch (e) {
        $.log(`‚ùåÁ≠æÂà∞ÊâßË°åÂ§±Ë¥•ÔºÅÂéüÂõ†‰∏∫${e}`);
    }
}
//Ëé∑ÂèñÊ¥ªÂä®token
async function getActivityToken(url) {
    try {
        const opts = {
            url: url,
            followRedirect: false,
            resultType: "all",
            headers: {
                'Accept-Encoding': `gzip, deflate, br`,
                'Connection': `keep-alive`,
                'Cookie': "",
                'Accept': `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`,
                'Host': `76177.activity-12.m.duiba.com.cn`,
                'User-Agent': `Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X)mxsa_mxbc`,
                'Accept-Language': `zh-CN,zh-Hans;q=0.9`
            }
        }
        let res = await fetch(opts);
        let headers = ObjectKeys2LowerCase(res?.headers) ?? {};
        //ÂØπÈùíÈæôËøõË°åÂÖºÂÆπ
        let session = Array.isArray(headers['set-cookie']) ? [...new Set(headers['set-cookie'])].join("") : headers['set-cookie'];
        let [wdata4, w_ts, _ac, wdata3, dcustom] = session?.match(/(wdata4|w_ts|_ac|wdata3|dcustom)=.+?;/g) ?? [];
        if (!wdata4) throw new Error(`token‰∏çÂ≠òÂú®`);
        $.session = wdata4 + w_ts + _ac + wdata3 + dcustom;
        $.log(`‚úÖ Ëé∑ÂèñÊ¥ªÂä®tokenÊàêÂäüÔºÅ`)
    } catch (e) {
        $.log(`‚õîÔ∏è Ëé∑ÂèñÊ¥ªÂä®tokenÂ§±Ë¥•ÔºÅ${e}`);
    }
}
//Ëé∑ÂèñCookie
async function getCookie() {
    try {
        if ($request && $request.method === 'OPTIONS') return;

        const header = ObjectKeys2LowerCase($request.headers) ?? {};
        const body = $.toObj($response.body);
        const token = header['access-token'];
        if (!(token && body)) throw new Error("get token error,the value is empty");

        const newData = {
            "userId": body?.data?.mobilePhone,
            "token": token,
            "userName": body?.data?.mobilePhone,
        }

        const index = userCookie.findIndex(e => e.userId == newData.userId);
        userCookie[index] ? userCookie[index] = newData : userCookie.push(newData);

        $.setjson(userCookie, ckName);
        $.msg($.name, `üéâ${newData.userName}Êõ¥Êñ∞tokenÊàêÂäü!`, ``);

    } catch (e) {
        throw e;
    }
}

//13‰ΩçÊó∂Èó¥Êà≥
function ts13() { return Math.round(new Date().getTime()).toString(); }

function getSHA256withRSA(content) {
    var privateKeyString = `-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQCtypUdHZJKlQ9L
L6lIJSphnhqjke7HclgWuWDRWvzov30du235cCm13mqJ3zziqLCwstdQkuXo9sOP
Ih94t6nzBHTuqYA1whrUnQrKfv9X4/h3QVkzwT+xWflE+KubJZoe+daLKkDeZjVW
nUku8ov0E5vwADACfntEhAwiSZUALX9UgNDTPbj5ESeII+VztZ/KOFsRHMTfDb1G
IR/dAc1mL5uYbh0h2Fa/fxRPgf7eJOeWGiygesl3CWj0Ue13qwX9PcG7klJXfToI
576MY+A7027a0aZ49QhKnysMGhTdtFCksYG0lwPz3bIR16NvlxNLKanc2h+ILTFQ
bMW/Y3DRAgMBAAECggEBAJGTfX6rE6zX2bzASsu9HhgxKN1VU6/L70/xrtEPp4SL
SpHKO9/S/Y1zpsigr86pQYBx/nxm4KFZewx9p+El7/06AX0djOD7HCB2/+AJq3iC
5NF4cvEwclrsJCqLJqxKPiSuYPGnzji9YvaPwArMb0Ff36KVdaHRMw58kfFys5Y2
HvDqh4x+sgMUS7kSEQT4YDzCDPlAoEFgF9rlXnh0UVS6pZtvq3cR7pR4A9hvDgX9
wU6zn1dGdy4MEXIpckuZkhwbqDLmfoHHeJc5RIjRP7WIRh2CodjetgPFE+SV7Sdj
ECmvYJbet4YLg+Qil0OKR9s9S1BbObgcbC9WxUcrTgECgYEA/Yj8BDfxcsPK5ebE
9N2teBFUJuDcHEuM1xp4/tFisoFH90JZJMkVbO19rddAMmdYLTGivWTyPVsM1+9s
tq/NwsFJWHRUiMK7dttGiXuZry+xvq/SAZoitgI8tXdDXMw7368vatr0g6m7ucBK
jZWxSHjK9/KVquVr7BoXFm+YxaECgYEAr3sgVNbr5ovx17YriTqe1FLTLMD5gPrz
ugJj7nypDYY59hLlkrA/TtWbfzE+vfrN3oRIz5OMi9iFk3KXFVJMjGg+M5eO9Y8m
14e791/q1jUuuUH4mc6HttNRNh7TdLg/OGKivE+56LEyFPir45zw/dqwQM3jiwIz
yPz/+bzmfTECgYATxrOhwJtc0FjrReznDMOTMgbWYYPJ0TrTLIVzmvGP6vWqG8rI
S8cYEA5VmQyw4c7G97AyBcW/c3K1BT/9oAj0wA7wj2JoqIfm5YPDBZkfSSEcNqqy
5Ur/13zUytC+VE/3SrrwItQf0QWLn6wxDxQdCw8J+CokgnDAoehbH6lTAQKBgQCE
67T/zpR9279i8CBmIDszBVHkcoALzQtU+H6NpWvATM4WsRWoWUx7AJ56Z+joqtPK
G1WztkYdn/L+TyxWADLvn/6Nwd2N79MyKyScKtGNVFeCCJCwoJp4R/UaE5uErBNn
OH+gOJvPwHj5HavGC5kYENC1Jb+YCiEDu3CB0S6d4QKBgQDGYGEFMZYWqO6+LrfQ
ZNDBLCI2G4+UFP+8ZEuBKy5NkDVqXQhHRbqr9S/OkFu+kEjHLuYSpQsclh6XSDks
5x/hQJNQszLPJoxvGECvz5TN2lJhuyCupS50aGKGqTxKYtiPHpWa8jZyjmanMKnE
dOGyw/X4SFyodv8AEloqd81yGg==
-----END PRIVATE KEY-----
`
    const { KEYUTIL, KJUR, hextob64u } = $.Jsrsasign;
    const key = KEYUTIL.getKey(privateKeyString)
    const signature = new KJUR.crypto.Signature({ alg: 'SHA256withRSA' })
    signature.init(key)
    signature.updateString(content)
    const originSign = signature.sign()
    const sign64u = hextob64u(originSign)
    return sign64u
}
//Êä¢ÂÖçÂçïÂà∏
 def mkpayload(self,params):
        params.update({'stamp':ts()})
        sorted_items = sorted(params.items())
        formatted_string = '&'.join([f'{k}={v}' for k, v in sorted_items])+'c274bac6493544b89d9c4f9d8d542b84'
        params.update({'sign':hashlib.md5(formatted_string.encode()).hexdigest()})
        return params
    def info(self):
        u='https://mxsa.mxbc.net/api/v1/h5/marketing/secretword/info'
        p={
            'marketingId': marketingId,
            's': '2',
        }
        p=self.mkpayload(p)
        r=requests.get(u,headers=self.headers,params=p)
        if 'marketingId' in r.text:
            rj=r.json()
            print('marketingIdÔºö',rj['data']['marketingId'])
            print(rj['data']['hintWord'])
            print('-'*50)
        else:
            print(r.text)
            print('‰ø°ÊÅØËé∑ÂèñÂºÇÂ∏∏')
    def confirm(self):
        try:
            u='https://mxsa.mxbc.net/api/v1/h5/marketing/secretword/confirm'
            p={"marketingId":marketingId,"round":round,'s':'2',"secretword":secretword}
            p = self.mkpayload(p)
            r=requests.post(u,headers=self.headers,json=p,timeout=0.75)
            print(r.text)
            if 'Â∑≤ËææÈ¢ÜÂèñ‰∏äÈôê' in r.text:
                return True
        except Exception as e:
            print(e)
    def run(self):
        self.info()
        wait(0.005)
        print(datetime.datetime.now())
        for i in range(fb_cont):
            if self.confirm()==True:
                return True
            time.sleep(0.75)
        print(datetime.datetime.now())
if __name__ == '__main__':
    token='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUx'
    marketingId='1816854086004391938'
    secretword = "Â•Ω‰∏ÄÊúµÁæé‰∏ΩÁöÑËåâËéâËä±"
    fb_cont = 300
    nowTine0 = time.strftime('%H', time.localtime())
    nextTime0 = str(int(nowTine0) + 1).zfill(2)
    round=nextTime0+":00"
    api=MXMS(token)
    api.run()
